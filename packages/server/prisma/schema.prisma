generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["debian-openssl-1.1.x", "native"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Admin {
    id             Int      @id @default(autoincrement())
    email          String   @unique
    fullName       String
    profilePicture String?
    password       String
    userId         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model User {
    id             Int          @id @default(autoincrement())
    email          String       @unique
    mobile         String?
    fullName       String
    profilePicture String?
    password       String
    userId         String
    dateOfBirth    DateTime?
    timeZone       String       @default("IST")
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    userSetting    UserSetting?
    userTabs       UserTab[]
    isDeleted      Boolean      @default(false)
}

enum ColumnNumber {
    THREE
    FOUR
    FIVE
}

model UserSetting {
    id                             Int          @id @default(autoincrement())
    userId                         Int          @unique
    user                           User         @relation(fields: [userId], references: [id])
    isDarkMode                     Boolean      @default(true)
    numberOfColumns                ColumnNumber
    showNumberOfBookmarkInTab      Boolean      @default(false)
    showNumberOfBookmarkInCategory Boolean      @default(false)
    showTagsInTooltip              Boolean      @default(false)
    showNoteInTooltip              Boolean      @default(false)
    allowDragDropToMoveLink        Boolean      @default(true)
    createdAt                      DateTime     @default(now())
    updatedAt                      DateTime     @updatedAt
}

model UserTab {
    id         Int        @id @default(autoincrement())
    identifier String     @unique
    userId     Int
    user       User       @relation(fields: [userId], references: [id])
    name       String
    order      Int
    categories Category[]
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    isDeleted  Boolean    @default(false)
}

model Category {
    id         Int      @id @default(autoincrement())
    identifier String   @unique
    name       String
    order      Int
    color      String
    icon       String?
    tabId      Int
    tab        UserTab  @relation(fields: [tabId], references: [id], onUpdate: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    links      Link[]
    isDeleted  Boolean  @default(false)
}

model Link {
    id         Int         @id @default(autoincrement())
    identifier String      @unique
    title      String
    url        String
    order      Int
    icon       String?
    notes      String?
    tags       Tag[]
    hiddenTags HiddenTag[]
    category   Category?   @relation(fields: [categoryId], references: [id])
    categoryId Int?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    isDeleted  Boolean     @default(false)
}

model Tag {
    id         Int    @id @default(autoincrement())
    identifier String @unique
    name       String
    order      Int // for priority 
    links      Link[]
}

model HiddenTag {
    id         Int    @id @default(autoincrement())
    identifier String @unique
    name       String
    order      Int
    links      Link[]
}
